#include <bits/stdc++.h>

using namespace std;
ifstream fin("input.in");
ofstream fout("input.out");
int n, m, sursa;

vector<vector <int>> graf;
vector<bool> viz;
vector<int> parinte;
queue<int> q;
int discovery[1000], low[1000];
int timp = 0, startNode;

int dfs_tarjan(int nod){

    discovery[nod] = low[nod] = timp;
    timp++;
    viz[nod] = true;
    bool pct_critic = false;

    int children = 0, cntdfs = 0;

    for(auto& vecin: graf[nod]){
        children++;
        if(parinte[nod] == vecin)
            continue;
        if(!viz[vecin]){
            parinte[vecin] = nod;
            cntdfs++;

            dfs_tarjan(vecin);
        }
        low[nod] = min(low[nod], low[vecin]);

        //printf("%d %d %d %d\n", nod, vecin, discovery[nod], low[vecin]);
        if(discovery[nod] <= low[vecin])
            pct_critic = true;
    }
    if(children > 1 && pct_critic && nod != startNode || nod == startNode && cntdfs > 1)
        cout<<"NOD CRITIC: "<<nod<<endl;
}

int main ()
{
    fin>>n>> m;
    graf.resize(n+1);
    viz.resize(n+1,0);
    parinte.resize(n+1, -1);
    sursa = 1;
    for (int i=0; i<m; i++) {
        int x,y;
        fin>> x >> y;
        graf[x].push_back(y);
        graf[y].push_back(x);
    }

    for(int i=2; i<=n; i++){
        if(!viz[i]){
            startNode = i;
            dfs_tarjan(i);
            cout<<endl;
        }
    }

}
