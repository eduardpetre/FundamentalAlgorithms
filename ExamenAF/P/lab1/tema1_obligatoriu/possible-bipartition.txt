//parcurgem graful printr-un bfs calculand nivelul fiecarui nod. In cazul in care un nod-tata are acelasi cu un nod-fiu, atunci graful nu este bipartit.

#include <bits/stdc++.h>
using namespace std;

ifstream fin("graf.in");
int n;
vector<vector<int>> edges;
bool possibleBipartition(int n, vector<vector<int>>& edges) {
    queue<int> q;
    vector<int> level(n+1, 0);
    vector<bool> visit(n+1, false);
    vector<vector<int>> graf(n+1);
    for (auto &edge: edges)
    {
        int u = edge[0];
        int v = edge[1];
        graf[u].push_back(v);
        graf[v].push_back(u);
    }

    for(int i=1; i<=n; i++){
        if(!visit[i]){
            q.push(i);
            while(!q.empty()){
                int u = q.front();
                q.pop();
                for(int i=0; i < graf[u].size(); i++){
                    if(!visit[graf[u][i]]){
                        q.push(graf[u][i]);

                        visit[graf[u][i]] = true;

                        level[graf[u][i]] = level[u] + 1;
                    }
                    else if (level[u] == level[graf[u][i]]) {
                        return false;
                    }
                }
            }
        }
    }
    return true;
}

int main(){
    fin>>n;
    vector<int> edge;
    while(!fin.eof()){
        int node, dest;
        fin>>node>>dest;
        edge.clear();
        edge.push_back(node);
        edge.push_back(dest);
        edges.push_back(edge);
    }

    if(possibleBipartition(n, edges))
        cout<<"Graful este bipartit";
    else
        cout<<"Graful nu este bipartit";
}



/*















--------------------------------------------------------------------------------





LEETCODE:

    bool possibleBipartition(int n, vector<vector<int>>& edges) {
    queue<int> q;
    vector<int> level(n+1, 0);
    vector<bool> visit(n+1, false);
    vector<vector<int>> graf(n+1);
     for (auto &edge: edges)
        {
            int u = edge[0];
            int v = edge[1];
            graf[u].push_back(v);
            graf[v].push_back(u);
        }
        
    for(int i=1; i<=n; i++){
        if(!visit[i]){
            q.push(i);
            while(!q.empty()){
                int u = q.front();
                q.pop();
                for(int i=0; i < graf[u].size(); i++){
                    if(!visit[graf[u][i]]){
                        q.push(graf[u][i]);

                        visit[graf[u][i]] = true;

                        level[graf[u][i]] = level[u] + 1;
                    }
                    else if (level[u] == level[graf[u][i]]) {
                        return false;
                    }
                }
            }
        }
    }
    return true;
   }

*/